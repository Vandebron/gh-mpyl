---
name: Validate pull requests

on:
  pull_request:
    paths:
      - src/**
      - tests/**
      - Dockerfile
      - entrypoint.sh
      - requirements.txt
      - Pipfile
      - Pipfile.lock
      - .github/workflows/**  # FIXME remove before merging

# If multiple commits are pushed simultaneously, only build the last one.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  lint:
    name: üßΩ Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/setup-python@v5.3.0
        id: cache-dependencies
        with:
          python-version: '3.11'
          cache: pipenv
          cache-dependency-path: |
            Pipfile.lock

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: pipenv install -d --deploy

      - name: Check formatting
        run: pipenv run format

      - name: Run lint
        run: pipenv run lint

      - name: Run test code lint
        run: pipenv run lint-test

  type-check:
    name: üßê Check types
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/setup-python@v5.3.0
        id: cache-dependencies
        with:
          python-version: '3.11'
          cache: pipenv
          cache-dependency-path: |
            Pipfile.lock

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: pipenv install -d --deploy

      - name: Check types
        run: pipenv run check-types

      - name: Check types test
        run: pipenv run check-types-test

  test:
    name: üß™ Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        id: cache-dependencies
        with:
          python-version: '3.11'
          cache: pipenv
          cache-dependency-path: |
            Pipfile.lock

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: pipenv install -d --deploy

      - name: Test
        run: pipenv run test-ci

      - name: Validate Config Example
        run: pipenv run validate-config-example

      - name: Coverage to xml
        run: pipenv run test-ci-coverage

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: build/coverage.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: 79 99

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          number: ${{ github.event.pull_request.number }}
          path: code-coverage-results.md

  release:
    name: üê≥ Build & publish Docker image
    runs-on: ubuntu-latest
    needs:
      - lint
      - type-check
      - test
    env:
      image-name: gh-mpyl
      image-version: pr-${{ github.event.pull_request.number }}
    outputs:
      image: ${{ steps.login-ecr-public.outputs.registry }}/vdb-public/${{ env.image-name }}:${{ env.image-version }}
    steps:
      - uses: actions/checkout@v4.2.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2.0.1
        with:
          registry-type: public

      - name: Create repository in ECR
        uses: int128/create-ecr-repository-action@v1.319.0
        with:
          repository: ${{ env.image-name }}
          public: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1

      - name: Build and push
        id: docker-build-push
        uses: docker/build-push-action@v6.9.0
        with:
          file: Dockerfile
          context: .
          tags: ${{ steps.login-ecr-public.outputs.registry }}/${{ vars.AWS_ECR_PUBLIC_ALIAS }}/${{ env.image-name }}:${{ env.image-version }}
          platforms: |-
            linux/amd64
            linux/arm64
          provenance: false
          push: true

  run:
    name: ‚ñ∂Ô∏è Run action
    runs-on: ubuntu-latest
    needs:
      - release
    steps:
      - uses: actions/checkout@v4

      - name: Point action.yaml to the new version
        env:
          IMAGE: docker://${{ needs.release.outputs.image }}
        run: yq -i '.runs.image = strenv(IMAGE)' action.yaml

      - name: Run docker image
        uses: ./
        with:
          group: health
