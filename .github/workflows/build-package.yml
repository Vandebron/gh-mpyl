name: build
on:
  push:
    branches-ignore: [ 'main' ]

jobs:
  Lint:
    name: 🧽 Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        id: cache-dependencies
        with:
          python-version: '3.9'
          cache: 'pipenv'
          cache-dependency-path: |
            Pipfile.lock

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: pipenv install -d --deploy

      - name: Check formatting
        run: pipenv run format

      - name: Run lint
        run: pipenv run lint

      - name: Run test code lint
        run: pipenv run lint-test

  TypeCheck:
    name: 🧐 Check types
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        id: cache-dependencies
        with:
          python-version: '3.9'
          cache: 'pipenv'
          cache-dependency-path: |
            Pipfile.lock

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: pipenv install -d --deploy

      - name: Check types
        run: pipenv run check-types

      - name: Check types test
        run: pipenv run check-types-test

  Test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        id: cache-dependencies
        with:
          python-version: '3.9'
          cache: 'pipenv'
          cache-dependency-path: |
            Pipfile.lock

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: pipenv install -d --deploy

      - name: Test
        run: pipenv run test-ci

      - name: Validate Config Example
        run: pipenv run validate-config-example

      - name: Coverage to xml
        run: pipenv run test-ci-coverage

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: build/coverage.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '79 99'

      - name: Find PR number
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        if: github.ref_name != 'main'
        with:
          state: open

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ steps.findPr.outputs.pr }}
          path: code-coverage-results.md

  Integration_Test_PR:
    name: Test PR
    runs-on: ubuntu-latest
    env:
      MPYL_CONFIG_PATH: mpyl_config.example.yml
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: ./.github/setup-kind
        with:
          traefik-chart-version: 27.0.2
          prometheus-chart-version: 60.3.0
          sealed-secrets-chart-version: 2.7.3
          spark-operator-chart-version: 1.1.25

      - name: Check mpyl health
        uses: ./.github/run-mpyl
        with:
          mpyl-command: health

      - name: Lint projects
        uses: ./.github/run-mpyl
        with:
          mpyl-command: projects lint

      - name: Validate upgrade status
        uses: ./.github/run-mpyl
        with:
          mpyl-command: projects upgrade

      - name: Build status
        uses: ./.github/run-mpyl
        with:
          mpyl-command: build status --all

# TODO: this will only work again if we have kind within the container
#      - name: Run deploy
#        uses: ./.github/run-mpyl
#        with:
#          mpyl-command: build run --all

  Integration_Test_Tag:
    name: Test tag
    runs-on: ubuntu-latest
    env:
      MPYL_CONFIG_PATH: mpyl_config.example.yml
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: ./.github/setup-kind
        with:
          traefik-chart-version: 27.0.2
          prometheus-chart-version: 60.3.0
          sealed-secrets-chart-version: 2.7.3
          spark-operator-chart-version: 1.1.25

      - name: Get head revision
        id: headRevision
        run: echo "headRevision=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Build status
        uses: ./.github/run-mpyl
        with:
          mpyl-command: build status

      - name: Force change
        run: |
          echo "To force a change " >> tests/projects/service/change.txt
          git add tests/projects/service/change.txt

      - name: Commit the change
        run: |
          git config --global user.email "somebody@somewhere.com"
          git config --global user.name "Some Person"
          git commit -a -m "A random change"

      - name: Switch to main
        run: git checkout -b main ${{ steps.headRevision.outputs.headRevision }}

      - name: Merge branch
        run: git merge --no-ff -m "Merge PR ${{ github.ref }}" ${{ github.ref }}

      - name: Tag merge
        run: git tag -a v${{ needs.Build_And_Upload.outputs.mpylVersion }} -m "Tagging v${{ needs.Build_And_Upload.outputs.mpylVersion }}"

      - name: Remove old build plan
        uses: ./.github/run-mpyl
        with:
          mpyl-command: build clean

      - name: Show build status
        uses: ./.github/run-mpyl
        env:
          TAG_NAME: v${{ needs.Build_And_Upload.outputs.mpylVersion }}
        with:
          mpyl-command: build status

# TODO: this will only work again if we have kind within the container
#      - name: Run tag build
#        uses: ./.github/run-mpyl
#        env:
#          TAG_NAME: v${{ needs.Build_And_Upload.outputs.mpylVersion }}
#        with:
#          mpyl-command: build run --all

