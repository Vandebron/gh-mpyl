---
vcs:
  changedFilesPath: !ENV ${CHANGED_FILES_PATH}
dagster:
  baseNamespace: dagster
  workspaceConfigMap: dagster-external-workspace-yaml
  workspaceFileKey: workspace.yaml
  daemon: dagster-daemon
  webserver: dagster-dagster-webserver
  globalServiceAccountOverride: global-dagster-user-deployment
whiteLists:
  default: [VPN]
  addresses:
    - name: VPN
      all: [10.0.0.1]
    - name: Outside-World
      all: [0.0.0.0/0]
    - name: K8s-Test
      all: [1.2.3.0, 1.2.3.1]
    - name: TargetSpecificWhitelist
      pr: [1.2.3.4]
      test: [1.2.3.4]
      acceptance: [2.3.4.5]
      production: [3.4.5.6]
kubernetes:
  deploymentStrategy:
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
    type: RollingUpdate
  deployAction: KubectlManifest
project:  # default values
  allowedMaintainers: [Team1, Team2, MPyL]
  deployment:
    kubernetes:
      job:
        ttlSecondsAfterFinished:
          all: 3600
      resources:
        instances:
          pr: 1
          test: 1
          acceptance: 1
          production: 3
        limit:
          cpus:
            pr: 0.5
            test: 0.5
            acceptance: 0.5
            production: 1.0
          mem:
            pr: 1024
            test: 1024
            acceptance: 1024
            production: 2048
      startupProbe:
        path:
          all: /health
        initialDelaySeconds: 4  # 0 - We expect service to rarely be up within 4 secs.
        periodSeconds: 2  # 10 - We want the service to become available as soon as possible
        timeoutSeconds: 3  # 1 - If the app is very busy during the startup stage, 1 second might be too fast
        successThreshold: 1  # 1 - We want the service to become available as soon as possible
        failureThreshold: 60  # 3 - 4 + 60 * 2 = more than 2 minutes
      livenessProbe:
        path:
          all: /health
        periodSeconds: 30  # 10
        timeoutSeconds: 20  # 1 - Busy apps may momentarily have long timeouts
        successThreshold: 1  # 1
        failureThreshold: 3  # 3
      metrics:
        path: /metrics
        enabled: true
      env:
        - key: OTEL_SERVICE_NAME
          all: cronjob
        - key: OTEL_EXPORTER_OTLP_ENDPOINT
          all: http://otel.example.com:4318
        - key: OTEL_LOGS_EXPORTER
          all: none
        - key: OTEL_METRICS_EXPORTER
          all: none
        - key: OTEL_TRACES_EXPORTER
          all: otlp
    traefik:
      hosts:
        - host:
            pr: Host(`{SERVICE-NAME}-{PR-NUMBER}.test-backend.nl`)
            test: Host(`{namespace}-{SERVICE-NAME}.test-backend.nl`)
            acceptance: Host(`{namespace}-{SERVICE-NAME}.acce-backend.nl`)
            production: Host(`{namespace}-{SERVICE-NAME}.prod-backend.nl`)
          tls:
            all: le-custom-prod-wildcard-cert
          insecure: false
          whitelists:
            all: [VPN]
    additionalTraefikRoutes:
      - name: ingress-intracloud-https
        clusterEnv:
          pr: test-other
          test: test-other
          acceptance: acce-other
          production: acce-other
        middlewares:
          - intracloud-middleware@kubernetescrd
        entrypoints:
          - intracloud
    traefikDefaults:
      httpMiddleware: traefik-https-redirect@kubernetescrd
      tls: le-custom-prod-wildcard-cert
