---
$schema: https://json-schema.org/draft/2020-12/schema#
# Taken from https://github.com/kubernetes/kubernetes/blob/master/api/openapi-spec/swagger.json and converted to YAML
definitions:
  io.k8s.api.core.v1.Affinity:
    description: Affinity is a group of affinity scheduling rules.
    additionalProperties: false
    properties:
      nodeAffinity:
        "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity"
        description: Describes node affinity scheduling rules for the pod.
      podAffinity:
        "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity"
        description: Describes pod affinity scheduling rules (e.g. co-locate this pod
          in the same node, zone, etc. as some other pod(s)).
      podAntiAffinity:
        "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity"
        description: Describes pod anti-affinity scheduling rules (e.g. avoid putting
          this pod in the same node, zone, etc. as some other pod(s)).
    type: object
  io.k8s.api.core.v1.PodAntiAffinity:
    description: Pod anti affinity is a group of inter pod anti affinity scheduling rules.
    additionalProperties: false
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the
          anti-affinity expressions specified by this field, but it may choose a
          node that violates one or more of the expressions. The node that is most
          preferred is the one with the greatest sum of weights, i.e. for each
          node that meets all of the scheduling requirements (resource request,
          requiredDuringScheduling anti-affinity expressions, etc.), compute a sum
          by iterating through the elements of this field and subtracting "weight"
          from the sum if the node has pods which matches the corresponding
          podAffinityTerm; the node(s) with the highest sum are the most
          preferred.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm'
        type: array
        x-kubernetes-list-type: atomic
      requiredDuringSchedulingIgnoredDuringExecution:
        description: >-
          If the anti-affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node. If the
          anti-affinity requirements specified by this field cease to be met at
          some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to
          each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodAffinityTerm'
        type: array
        x-kubernetes-list-type: atomic
    type: object
  io.k8s.api.core.v1.PodAffinity:
    description: Pod affinity is a group of inter pod affinity scheduling rules.
    additionalProperties: false
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the
          affinity expressions specified by this field, but it may choose a node
          that violates one or more of the expressions. The node that is most
          preferred is the one with the greatest sum of weights, i.e. for each
          node that meets all of the scheduling requirements (resource request,
          requiredDuringScheduling affinity expressions, etc.), compute a sum by
          iterating through the elements of this field and adding "weight" to the
          sum if the node has pods which matches the corresponding
          podAffinityTerm; the node(s) with the highest sum are the most
          preferred.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm'
        type: array
        x-kubernetes-list-type: atomic
      requiredDuringSchedulingIgnoredDuringExecution:
        description: >-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node. If the
          affinity requirements specified by this field cease to be met at some
          point during pod execution (e.g. due to a pod label update), the system
          may or may not try to eventually evict the pod from its node. When there
          are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodAffinityTerm'
        type: array
        x-kubernetes-list-type: atomic
    type: object
  io.k8s.api.core.v1.WeightedPodAffinityTerm:
    description: >-
      The weights of all of the matched WeightedPodAffinityTerm fields are added
      per-node to find the most preferred node(s)
    additionalProperties: false
    properties:
      podAffinityTerm:
        $ref: '#/definitions/io.k8s.api.core.v1.PodAffinityTerm'
        description: 'Required. A pod affinity term, associated with the corresponding weight.'
      weight:
        description: >-
          weight associated with matching the corresponding podAffinityTerm, in
          the range 1-100.
        format: int32
        type: integer
    required:
      - weight
      - podAffinityTerm
    type: object
  io.k8s.api.core.v1.PodAffinityTerm:
    description: >-
      Defines a set of pods (namely those matching the labelSelector relative to
      the given namespace(s)) that this pod should be co-located (affinity) or not
      co-located (anti-affinity) with, where co-located is defined as running on a
      node whose value of the label with key <topologyKey> matches that of any
      node on which a pod of the set of pods is running
    additionalProperties: false
    properties:
      labelSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: >-
          A label query over a set of resources, in this case pods. If it's null,
          this PodAffinityTerm matches with no Pods.
      matchLabelKeys:
        description: >-
          MatchLabelKeys is a set of pod label keys to select which pods will be
          taken into consideration. The keys are used to lookup values from the
          incoming pod labels, those key-value labels are merged with
          `labelSelector` as `key in (value)` to select the group of existing pods
          which pods will be taken into consideration for the incoming pod's pod
          (anti) affinity. Keys that don't exist in the incoming pod labels will
          be ignored. The default value is empty. The same key is forbidden to
          exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys
          cannot be set when labelSelector isn't set.
        items:
          type: string
        type: array
        x-kubernetes-list-type: atomic
      mismatchLabelKeys:
        description: >-
          MismatchLabelKeys is a set of pod label keys to select which pods will
          be taken into consideration. The keys are used to lookup values from the
          incoming pod labels, those key-value labels are merged with
          `labelSelector` as `key notin (value)` to select the group of existing
          pods which pods will be taken into consideration for the incoming pod's
          pod (anti) affinity. Keys that don't exist in the incoming pod labels
          will be ignored. The default value is empty. The same key is forbidden
          to exist in both mismatchLabelKeys and labelSelector. Also,
          mismatchLabelKeys cannot be set when labelSelector isn't set.
        items:
          type: string
        type: array
        x-kubernetes-list-type: atomic
      namespaceSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: >-
          A label query over the set of namespaces that the term applies to. The
          term is applied to the union of the namespaces selected by this field
          and the ones listed in the namespaces field. null selector and null or
          empty namespaces list means "this pod's namespace". An empty selector
          ({}) matches all namespaces.
      namespaces:
        description: >-
          namespaces specifies a static list of namespace names that the term
          applies to. The term is applied to the union of the namespaces listed in
          this field and the ones selected by namespaceSelector. null or empty
          namespaces list and null namespaceSelector means "this pod's namespace".
        items:
          type: string
        type: array
        x-kubernetes-list-type: atomic
      topologyKey:
        description: >-
          This pod should be co-located (affinity) or not co-located
          (anti-affinity) with the pods matching the labelSelector in the
          specified namespaces, where co-located is defined as running on a node
          whose value of the label with key topologyKey matches that of any node
          on which any of the selected pods is running. Empty topologyKey is not
          allowed.
        type: string
    required:
      - topologyKey
    type: object
  io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector:
    description: >-
      A label selector is a label query over a set of resources. The result of
      matchLabels and matchExpressions are ANDed. An empty label selector matches
      all objects. A null label selector matches no objects.
    additionalProperties: false
    properties:
      matchExpressions:
        description: >-
          matchExpressions is a list of label selector requirements. The
          requirements are ANDed.
        items:
          $ref: >-
            #/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
        type: array
        x-kubernetes-list-type: atomic
      matchLabels:
        additionalProperties:
          type: string
        description: >-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the
          matchLabels map is equivalent to an element of matchExpressions, whose
          key field is "key", the operator is "In", and the values array contains
          only "value". The requirements are ANDed.
        type: object
    type: object
    x-kubernetes-map-type: atomic
  io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement:
    description: >-
      A label selector requirement is a selector that contains values, a key, and
      an operator that relates the key and values.
    additionalProperties: false
    properties:
      key:
        description: key is the label key that the selector applies to.
        type: string
      operator:
        description: >-
          operator represents a key's relationship to a set of values. Valid
          operators are In, NotIn, Exists and DoesNotExist.
        type: string
      values:
        description: >-
          values is an array of string values. If the operator is In or NotIn, the
          values array must be non-empty. If the operator is Exists or
          DoesNotExist, the values array must be empty. This array is replaced
          during a strategic merge patch.
        items:
          type: string
        type: array
        x-kubernetes-list-type: atomic
    required:
      - key
      - operator
    type: object
  io.k8s.api.core.v1.NodeAffinity:
    description: Node affinity is a group of node affinity scheduling rules.
    additionalProperties: false
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the
          affinity expressions specified by this field, but it may choose a node
          that violates one or more of the expressions. The node that is most
          preferred is the one with the greatest sum of weights, i.e. for each
          node that meets all of the scheduling requirements (resource request,
          requiredDuringScheduling affinity expressions, etc.), compute a sum by
          iterating through the elements of this field and adding "weight" to the
          sum if the node matches the corresponding matchExpressions; the node(s)
          with the highest sum are the most preferred.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm'
        type: array
        x-kubernetes-list-type: atomic
      requiredDuringSchedulingIgnoredDuringExecution:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSelector'
        description: >-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node. If the
          affinity requirements specified by this field cease to be met at some
          point during pod execution (e.g. due to an update), the system may or
          may not try to eventually evict the pod from its node.
    type: object
  io.k8s.api.core.v1.PreferredSchedulingTerm:
    description: >-
      An empty preferred scheduling term matches all objects with implicit weight
      0 (i.e. it's a no-op). A null preferred scheduling term matches no objects
      (i.e. is also a no-op).
    additionalProperties: false
    properties:
      preference:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorTerm'
        description: 'A node selector term, associated with the corresponding weight.'
      weight:
        description: >-
          Weight associated with matching the corresponding nodeSelectorTerm, in
          the range 1-100.
        format: int32
        type: integer
    required:
      - weight
      - preference
    type: object
  io.k8s.api.core.v1.NodeSelector:
    description: >-
      A node selector represents the union of the results of one or more label
      queries over a set of nodes; that is, it represents the OR of the selectors
      represented by the node selector terms.
    additionalProperties: false
    properties:
      nodeSelectorTerms:
        description: Required. A list of node selector terms. The terms are ORed.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorTerm'
        type: array
        x-kubernetes-list-type: atomic
    required:
      - nodeSelectorTerms
    type: object
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.NodeSelectorTerm:
    description: >-
      A null or empty node selector term matches no objects. The requirements of
      them are ANDed. The TopologySelectorTerm type implements a subset of the
      NodeSelectorTerm.
    additionalProperties: false
    properties:
      matchExpressions:
        description: A list of node selector requirements by node's labels.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement'
        type: array
        x-kubernetes-list-type: atomic
      matchFields:
        description: A list of node selector requirements by node's fields.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement'
        type: array
        x-kubernetes-list-type: atomic
    type: object
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.NodeSelectorRequirement:
    description: >-
      A node selector requirement is a selector that contains values, a key, and
      an operator that relates the key and values.
    additionalProperties: false
    properties:
      key:
        description: The label key that the selector applies to.
        type: string
      operator:
        description: >-
          Represents a key's relationship to a set of values. Valid operators are
          In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        type: string
      values:
        description: >-
          An array of string values. If the operator is In or NotIn, the values
          array must be non-empty. If the operator is Exists or DoesNotExist, the
          values array must be empty. If the operator is Gt or Lt, the values
          array must have a single element, which will be interpreted as an
          integer. This array is replaced during a strategic merge patch.
        items:
          type: string
        type: array
        x-kubernetes-list-type: atomic
    required:
      - key
      - operator
    type: object
  io.k8s.api.core.v1.SecurityContext:
    description: >-
      SecurityContext holds security configuration that will be applied to a
      container. Some fields are present in both SecurityContext and
      PodSecurityContext.  When both are set, the values in SecurityContext take
      precedence.
    additionalProperties: false
    properties:
      allowPrivilegeEscalation:
        description: >-
          AllowPrivilegeEscalation controls whether a process can gain more
          privileges than its parent process. This bool directly controls if the
          no_new_privs flag will be set on the container process.
          AllowPrivilegeEscalation is true always when the container is: 1) run as
          Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when
          spec.os.name is windows.
        type: boolean
      appArmorProfile:
        $ref: '#/definitions/io.k8s.api.core.v1.AppArmorProfile'
        description: >-
          appArmorProfile is the AppArmor options to use by this container. If
          set, this profile overrides the pod's appArmorProfile. Note that this
          field cannot be set when spec.os.name is windows.
      capabilities:
        $ref: '#/definitions/io.k8s.api.core.v1.Capabilities'
        description: >-
          The capabilities to add/drop when running containers. Defaults to the
          default set of capabilities granted by the container runtime. Note that
          this field cannot be set when spec.os.name is windows.
      privileged:
        description: >-
          Run container in privileged mode. Processes in privileged containers are
          essentially equivalent to root on the host. Defaults to false. Note that
          this field cannot be set when spec.os.name is windows.
        type: boolean
      procMount:
        description: >-
          procMount denotes the type of proc mount to use for the containers. The
          default value is Default which uses the container runtime defaults for
          readonly paths and masked paths. This requires the ProcMountType feature
          flag to be enabled. Note that this field cannot be set when spec.os.name
          is windows.
        type: string
      readOnlyRootFilesystem:
        description: >-
          Whether this container has a read-only root filesystem. Default is
          false. Note that this field cannot be set when spec.os.name is windows.
        type: boolean
      runAsGroup:
        description: >-
          The GID to run the entrypoint of the container process. Uses runtime
          default if unset. May also be set in PodSecurityContext.  If set in both
          SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence. Note that this field cannot be set
          when spec.os.name is windows.
        format: int64
        type: integer
      runAsNonRoot:
        description: >-
          Indicates that the container must run as a non-root user. If true, the
          Kubelet will validate the image at runtime to ensure that it does not
          run as UID 0 (root) and fail to start the container if it does. If unset
          or false, no such validation will be performed. May also be set in
          PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes
          precedence.
        type: boolean
      runAsUser:
        description: >-
          The UID to run the entrypoint of the container process. Defaults to user
          specified in image metadata if unspecified. May also be set in
          PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes
          precedence. Note that this field cannot be set when spec.os.name is
          windows.
        format: int64
        type: integer
      seLinuxOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.SELinuxOptions'
        description: >-
          The SELinux context to be applied to the container. If unspecified, the
          container runtime will allocate a random SELinux context for each
          container.  May also be set in PodSecurityContext.  If set in both
          SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence. Note that this field cannot be set
          when spec.os.name is windows.
      seccompProfile:
        $ref: '#/definitions/io.k8s.api.core.v1.SeccompProfile'
        description: >-
          The seccomp options to use by this container. If seccomp options are
          provided at both the pod & container level, the container options
          override the pod options. Note that this field cannot be set when
          spec.os.name is windows.
      windowsOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions'
        description: >-
          The Windows specific settings applied to all containers. If unspecified,
          the options from the PodSecurityContext will be used. If set in both
          SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence. Note that this field cannot be set
          when spec.os.name is linux.
    type: object
  io.k8s.api.core.v1.PodSecurityContext:
    description: >-
      PodSecurityContext holds pod-level security attributes and common container
      settings. Some fields are also present in container.securityContext.  Field
      values of container.securityContext take precedence over field values of
      PodSecurityContext.
    additionalProperties: false
    properties:
      appArmorProfile:
        $ref: '#/definitions/io.k8s.api.core.v1.AppArmorProfile'
        description: >-
          appArmorProfile is the AppArmor options to use by the containers in this
          pod. Note that this field cannot be set when spec.os.name is windows.
      fsGroup:
        description: >-
          A special supplemental group that applies to all containers in a pod.
          Some volume types allow the Kubelet to change the ownership of that
          volume to be owned by the pod:
          1. The owning GID will be the FSGroup 2. The setgid bit is set (new
          files created in the volume will be owned by FSGroup) 3. The permission
          bits are OR'd with rw-rw----
          If unset, the Kubelet will not modify the ownership and permissions of
          any volume. Note that this field cannot be set when spec.os.name is
          windows.
        format: int64
        type: integer
      fsGroupChangePolicy:
        description: >-
          fsGroupChangePolicy defines behavior of changing ownership and
          permission of the volume before being exposed inside Pod. This field
          will only apply to volume types which support fsGroup based
          ownership(and permissions). It will have no effect on ephemeral volume
          types such as: secret, configmaps and emptydir. Valid values are
          "OnRootMismatch" and "Always". If not specified, "Always" is used. Note
          that this field cannot be set when spec.os.name is windows.
        type: string
      runAsGroup:
        description: >-
          The GID to run the entrypoint of the container process. Uses runtime
          default if unset. May also be set in SecurityContext.  If set in both
          SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence for that container. Note that this
          field cannot be set when spec.os.name is windows.
        format: int64
        type: integer
      runAsNonRoot:
        description: >-
          Indicates that the container must run as a non-root user. If true, the
          Kubelet will validate the image at runtime to ensure that it does not
          run as UID 0 (root) and fail to start the container if it does. If unset
          or false, no such validation will be performed. May also be set in
          SecurityContext.  If set in both SecurityContext and PodSecurityContext,
          the value specified in SecurityContext takes precedence.
        type: boolean
      runAsUser:
        description: >-
          The UID to run the entrypoint of the container process. Defaults to user
          specified in image metadata if unspecified. May also be set in
          SecurityContext.  If set in both SecurityContext and PodSecurityContext,
          the value specified in SecurityContext takes precedence for that
          container. Note that this field cannot be set when spec.os.name is
          windows.
        format: int64
        type: integer
      seLinuxChangePolicy:
        description: >-
          seLinuxChangePolicy defines how the container's SELinux label is applied
          to all volumes used by the Pod. It has no effect on nodes that do not
          support SELinux or to volumes does not support SELinux. Valid values are
          "MountOption" and "Recursive".
          "Recursive" means relabeling of all files on all Pod volumes by the
          container runtime. This may be slow for large volumes, but allows mixing
          privileged and unprivileged Pods sharing the same volume on the same
          node.
          "MountOption" mounts all eligible Pod volumes with `-o context` mount
          option. This requires all Pods that share the same volume to use the
          same SELinux label. It is not possible to share the same volume among
          privileged and unprivileged Pods. Eligible volumes are in-tree
          FibreChannel and iSCSI volumes, and all CSI volumes whose CSI driver
          announces SELinux support by setting spec.seLinuxMount: true in their
          CSIDriver instance. Other volumes are always re-labelled recursively.
          "MountOption" value is allowed only when SELinuxMount feature gate is
          enabled.
          If not specified and SELinuxMount feature gate is enabled, "MountOption"
          is used. If not specified and SELinuxMount feature gate is disabled,
          "MountOption" is used for ReadWriteOncePod volumes and "Recursive" for
          all other volumes.
          This field affects only Pods that have SELinux label set, either in
          PodSecurityContext or in SecurityContext of all containers.
          All Pods that use the same volume should use the same
          seLinuxChangePolicy, otherwise some pods can get stuck in
          ContainerCreating state. Note that this field cannot be set when
          spec.os.name is windows.
        type: string
      seLinuxOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.SELinuxOptions'
        description: >-
          The SELinux context to be applied to all containers. If unspecified, the
          container runtime will allocate a random SELinux context for each
          container.  May also be set in SecurityContext.  If set in both
          SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence for that container. Note that this
          field cannot be set when spec.os.name is windows.
      seccompProfile:
        $ref: '#/definitions/io.k8s.api.core.v1.SeccompProfile'
        description: >-
          The seccomp options to use by the containers in this pod. Note that this
          field cannot be set when spec.os.name is windows.
      supplementalGroups:
        description: >-
          A list of groups applied to the first process run in each container, in
          addition to the container's primary GID and fsGroup (if specified).  If
          the SupplementalGroupsPolicy feature is enabled, the
          supplementalGroupsPolicy field determines whether these are in addition
          to or instead of any group memberships defined in the container image.
          If unspecified, no additional groups are added, though group memberships
          defined in the container image may still be used, depending on the
          supplementalGroupsPolicy field. Note that this field cannot be set when
          spec.os.name is windows.
        items:
          format: int64
          type: integer
        type: array
        x-kubernetes-list-type: atomic
      supplementalGroupsPolicy:
        description: >-
          Defines how supplemental groups of the first container processes are
          calculated. Valid values are "Merge" and "Strict". If not specified,
          "Merge" is used. (Alpha) Using the field requires the
          SupplementalGroupsPolicy feature gate to be enabled and the container
          runtime must implement support for this feature. Note that this field
          cannot be set when spec.os.name is windows.
        type: string
      sysctls:
        description: >-
          Sysctls hold a list of namespaced sysctls used for the pod. Pods with
          unsupported sysctls (by the container runtime) might fail to launch.
          Note that this field cannot be set when spec.os.name is windows.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Sysctl'
        type: array
        x-kubernetes-list-type: atomic
      windowsOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions'
        description: >-
          The Windows specific settings applied to all containers. If unspecified,
          the options within a container's SecurityContext will be used. If set in
          both SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence. Note that this field cannot be set
          when spec.os.name is linux.
    type: object
  io.k8s.api.core.v1.WindowsSecurityContextOptions:
    description: >-
      WindowsSecurityContextOptions contain Windows-specific options and
      credentials.
    properties:
      gmsaCredentialSpec:
        description: >-
          GMSACredentialSpec is where the GMSA admission webhook
          (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents
          of the GMSA credential spec named by the GMSACredentialSpecName field.
        type: string
      gmsaCredentialSpecName:
        description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        type: string
      hostProcess:
        description: >-
          HostProcess determines if a container should be run as a 'Host Process'
          container. All of a Pod's containers must have the same effective
          HostProcess value (it is not allowed to have a mix of HostProcess
          containers and non-HostProcess containers). In addition, if HostProcess
          is true then HostNetwork must also be set to true.
        type: boolean
      runAsUserName:
        description: >-
          The UserName in Windows to run the entrypoint of the container process.
          Defaults to the user specified in image metadata if unspecified. May
          also be set in PodSecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes
          precedence.
        type: string
    type: object
  io.k8s.api.core.v1.Sysctl:
    description: Sysctl defines a kernel parameter to be set
    properties:
      name:
        description: Name of a property to set
        type: string
      value:
        description: Value of a property to set
        type: string
    required:
      - name
      - value
    type: object
  io.k8s.api.core.v1.SeccompProfile:
    description: >-
      SeccompProfile defines a pod/container's seccomp profile settings. Only one
      profile source may be set.
    properties:
      localhostProfile:
        description: >-
          localhostProfile indicates a profile defined in a file on the node
          should be used. The profile must be preconfigured on the node to work.
          Must be a descending path, relative to the kubelet's configured seccomp
          profile location. Must be set if type is "Localhost". Must NOT be set
          for any other type.
        type: string
      type:
        description: >-
          type indicates which kind of seccomp profile will be applied. Valid
          options are:
          Localhost - a profile defined in a file on the node should be used.
          RuntimeDefault - the container runtime default profile should be used.
          Unconfined - no profile should be applied.
        type: string
    required:
      - type
    type: object
    x-kubernetes-unions:
      - discriminator: type
        fields-to-discriminateBy:
          localhostProfile: LocalhostProfile
  io.k8s.api.core.v1.SELinuxOptions:
    description: SELinuxOptions are the labels to be applied to the container
    properties:
      level:
        description: Level is SELinux level label that applies to the container.
        type: string
      role:
        description: Role is a SELinux role label that applies to the container.
        type: string
      type:
        description: Type is a SELinux type label that applies to the container.
        type: string
      user:
        description: User is a SELinux user label that applies to the container.
        type: string
    type: object
  io.k8s.api.core.v1.AppArmorProfile:
    description: AppArmorProfile defines a pod or container's AppArmor settings.
    properties:
      localhostProfile:
        description: >-
          localhostProfile indicates a profile loaded on the node that should be
          used. The profile must be preconfigured on the node to work. Must match
          the loaded name of the profile. Must be set if and only if type is
          "Localhost".
        type: string
      type:
        description: >-
          type indicates which kind of AppArmor profile will be applied. Valid
          options are:
            Localhost - a profile pre-loaded on the node.
            RuntimeDefault - the container runtime's default profile.
            Unconfined - no AppArmor enforcement.
        type: string
    required:
      - type
    type: object
    x-kubernetes-unions:
      - discriminator: type
        fields-to-discriminateBy:
          localhostProfile: LocalhostProfile
  io.k8s.api.core.v1.Capabilities:
    description: Adds and removes POSIX capabilities from running containers.
    properties:
      add:
        description: Added capabilities
        items:
          type: string
        type: array
        x-kubernetes-list-type: atomic
      drop:
        description: Removed capabilities
        items:
          type: string
        type: array
        x-kubernetes-list-type: atomic
    type: object
  io.k8s.api.apps.v1.DeploymentStrategy:
    description: DeploymentStrategy describes how to replace existing pods with new ones.
    properties:
      rollingUpdate:
        $ref: '#/definitions/io.k8s.api.apps.v1.RollingUpdateDeployment'
        description: Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
      type:
        description: Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
        type: string
        enum:
          - RollingUpdate
          - Recreate
        default: RollingUpdate
    type: object
  io.k8s.api.apps.v1.RollingUpdateDeployment:
    description: Spec to control the desired behavior of rolling update.
    properties:
      maxSurge:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        description: 'The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.'
      maxUnavailable:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        description: 'The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.'
    type: object
  io.k8s.apimachinery.pkg.util.intstr.IntOrString:
    description: IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
    format: int-or-string
    type: string
  io.k8s.api.core.v1.EnvVarSource:
    description: EnvVarSource represents a source for the value of an EnvVar.
    properties:
      configMapKeyRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector'
        description: Selects a key of a ConfigMap.
      fieldRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectFieldSelector'
        description: >-
          Selects a field of the pod: supports metadata.name,
          metadata.namespace, metadata.labels, metadata.annotations,
          spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
      resourceFieldRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceFieldSelector'
        description: >-
          Selects a resource of the container: only resources limits and
          requests (limits.cpu, limits.memory, limits.ephemeral-storage,
          requests.cpu, requests.memory and requests.ephemeral-storage) are
          currently supported.
      secretKeyRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretKeySelector'
        description: Selects a key of a secret in the pod's namespace
    type: object
  io.k8s.api.core.v1.ConfigMapKeySelector:
    description: Selects a key from a ConfigMap.
    properties:
      key:
        description: The key to select.
        type: string
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
      optional:
        description: Specify whether the ConfigMap or it's key must be defined
        type: boolean
    required:
      - key
    type: object
  io.k8s.api.core.v1.ObjectFieldSelector:
    description: ObjectFieldSelector selects an APIVersioned field of an object.
    properties:
      apiVersion:
        description: >-
          Version of the schema the FieldPath is written in terms of, defaults
          to "v1".
        type: string
      fieldPath:
        description: Path of the field to select in the specified API version.
        type: string
    required:
      - fieldPath
    type: object
  io.k8s.api.core.v1.ResourceFieldSelector:
    description: >-
      ResourceFieldSelector represents container resources (cpu, memory) and
      their output format
    properties:
      containerName:
        description: 'Container name: required for volumes, optional for env vars'
        type: string
      divisor:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: Specifies the output format of the exposed resources, defaults to "1"
      resource:
        description: 'Required: resource to select'
        type: string
    required:
      - resource
    type: object
  io.k8s.api.core.v1.SecretKeySelector:
    description: SecretKeySelector selects a key of a Secret.
    properties:
      key:
        description: The key of the secret to select from.  Must be a valid secret key.
        type: string
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
      optional:
        description: Specify whether the Secret or it's key must be defined
        type: boolean
    required:
      - key
    type: object
  io.k8s.apimachinery.pkg.api.resource.Quantity:
    oneOf:
      - type: string
      - type: number
  io.k8s.api.core.v1.LocalObjectReference:
    description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    properties:
      name:
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        type: string
    type: object
  io.k8s.api.rbac.v1.PolicyRule:
    description: PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
    required:
      - verbs
    properties:
      apiGroups:
        description: APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
        type: array
        items:
          type: string
      nonResourceURLs:
        description: NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
        type: array
        items:
          type: string
      resourceNames:
        description: ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
        type: array
        items:
          type: string
      resources:
        description: Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
        type: array
        items:
          type: string
      verbs:
        description: Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
        type: array
        items:
          type: string
  io.k8s.api.batch.v1.CronJobSpec:
    description: CronJobSpec describes how the job execution will look like and when it will actually run.
    properties:
      concurrencyPolicy:
        description: |-
          Specifies how to treat concurrent executions of a Job. Valid values are:

          - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
        type: string
        enum:
          - Allow
          - Forbid
          - Replace
      failedJobsHistoryLimit:
        description: The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
        format: int32
        type: integer
      schedule:
        description: The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
        type: string
      startingDeadlineSeconds:
        description: Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
        format: int64
        type: integer
      successfulJobsHistoryLimit:
        description: The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
        format: int32
        type: integer
      suspend:
        description: This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
        type: boolean
      timeZone:
        description: The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
        type: string
    required:
      - schedule
    type: object
